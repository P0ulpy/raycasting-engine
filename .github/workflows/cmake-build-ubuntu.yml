name: CMake Build Ubuntu

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  job:
    name: ${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}-Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        build_type: [Debug, Release]
        c_compiler: [clang, gcc]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install dependencies on Ubuntu for GLFW3
        if: runner.os == 'ubuntu-latest'
        run: sudo apt install libxinerama-dev libxcursor-dev pkg-config xcursor xinerama xorg-dev xorg libglu1-mesa-dev libglu1-mesa

      - name: Install dependencies on Ubuntu for Raylib
        if: runner.os == 'ubuntu-latest'
        run: sudo apt install libgl1-mesa-dev libx11-dev libxcursor-dev libxinerama-dev libxrandr-dev
    
      - name: Install dependencies on macOS for GLFW3
        if: runner.os == 'macos-latest'
        run: brew install install libxinerama-dev libxcursor-dev pkg-config xcursor xinerama xorg-dev xorg libglu1-mesa-dev libglu1-mesa

      - name: Install dependencies on macOS for Raylib
        if: runner.os == 'macos-latest'
        run: brew install libgl1-mesa-dev libx11-dev libxcursor-dev libxinerama-dev libxrandr-dev

      # - name: Install dependencies on Windows
      #   if: runner.os == 'windows-latest'
      #   run: choco install <package-name>

      - uses: lukka/get-cmake@latest

      - name: Restore from cache and setup vcpkg executable and data files.
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: 'vcpkg.json'

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}

      - name: Build CMake
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --build-config ${{ matrix.build_type }}
